subprojects {
    group = 'spiffe'
    version = '0.6.0'

    apply plugin: 'java-library'
    apply plugin: 'jacoco'

    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    repositories {
        mavenCentral()
    }

    test {
        useJUnitPlatform()
        finalizedBy jacocoTestReport
    }

    ext {
        jupiterVersion = '5.6.2'
        mockitoVersion = '3.3.3'
        lombokVersion = '1.18.12'
    }

    dependencies {
        implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.10'
        implementation group: 'commons-validator', name: 'commons-validator', version: "1.6"

        testCompileOnly group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: "${jupiterVersion}"
        testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: "${jupiterVersion}"
        testCompileOnly group: 'org.junit.jupiter', name: 'junit-jupiter-params', version: "${jupiterVersion}"

        testCompileOnly group: 'org.mockito', name: 'mockito-core', version: "${mockitoVersion}"
        testRuntimeOnly group: 'org.mockito', name: 'mockito-junit-jupiter', version: "${mockitoVersion}"

        // Project Lombok dependency
        compileOnly group: 'org.projectlombok', name: 'lombok', version: "${lombokVersion}"
        annotationProcessor group: 'org.projectlombok', name: 'lombok', version: "${lombokVersion}"
        testCompileOnly group: 'org.projectlombok', name: 'lombok', version: "${lombokVersion}"
        testAnnotationProcessor group: 'org.projectlombok', name: 'lombok', version: "${lombokVersion}"
    }

    jacocoTestReport {
        dependsOn test // tests are required to run before generating the report
        reports {
            xml.enabled false
            csv.enabled false
            html.destination file("${buildDir}/jacocoHtml")
        }

        afterEvaluate {
            classDirectories.setFrom(files(classDirectories.files.collect {
                fileTree(dir: it, exclude: ['**/grpc/**', '**/exception/**'])
            }))
        }
    }

    jacoco {
        toolVersion = "0.8.5"
        reportsDir = file("$buildDir/customJacocoReportDir")
    }

    test {
        testLogging {
            afterSuite { desc, result ->
                if (!desc.parent) { // will match the outermost suite
                    println "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
                }
            }
        }
    }
}

// copy submodules jars to a common folder for deploy
task copyJars(type: Copy) {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
    from subprojects.collect { it.tasks.withType(Jar) }
    into "$buildDir/libs"
}

task assemble {
    dependsOn subprojects.assemble
}

assemble.finalizedBy copyJars

task clean {
    dependsOn subprojects.clean
    delete "$buildDir"
}

