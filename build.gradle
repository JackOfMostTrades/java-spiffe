subprojects {
    group = 'spiffe'
    version = '0.6.0'

    apply plugin: 'java-library'
    apply plugin: 'jacoco'

    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    repositories {
        mavenCentral()
    }

    test {
        useJUnitPlatform()
        finalizedBy jacocoTestReport
    }

    dependencies {
        implementation group: 'org.apache.commons', name: 'commons-lang3', version: "3.8.1"
        implementation group: 'commons-validator', name: 'commons-validator', version: "1.6"

        testCompileOnly 'org.junit.jupiter:junit-jupiter-api:5.6.2'
        testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.6.2'
        testCompileOnly 'org.junit.jupiter:junit-jupiter-params:5.6.2'
        testCompileOnly 'org.mockito:mockito-core:3.3.3'
        testRuntimeOnly 'org.mockito:mockito-junit-jupiter:3.3.3'

        // Project Lombok dependency
        compileOnly 'org.projectlombok:lombok:1.18.12'
        annotationProcessor 'org.projectlombok:lombok:1.18.12'
        testCompileOnly 'org.projectlombok:lombok:1.18.12'
        testAnnotationProcessor 'org.projectlombok:lombok:1.18.12'
    }

    jacocoTestReport {
        dependsOn test // tests are required to run before generating the report
        reports {
            xml.enabled false
            csv.enabled false
            html.destination file("${buildDir}/jacocoHtml")
        }

        afterEvaluate {
            classDirectories.setFrom(files(classDirectories.files.collect {
                fileTree(dir: it, exclude: ['**/grpc/**', '**/exception/**'])
            }))
        }
    }

    jacoco {
        toolVersion = "0.8.5"
        reportsDir = file("$buildDir/customJacocoReportDir")
    }

    test {
        testLogging {
            afterSuite { desc, result ->
                if (!desc.parent) { // will match the outermost suite
                    println "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
                }
            }
        }
    }
}

// copy submodules jars to a common folder for deploy
task copyJars(type: Copy) {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
    from subprojects.collect { it.tasks.withType(Jar) }
    into "$buildDir/libs"
}

task build {
    dependsOn subprojects.build
}

build.finalizedBy copyJars

task clean {
    dependsOn subprojects.clean
    delete "$buildDir"
}

